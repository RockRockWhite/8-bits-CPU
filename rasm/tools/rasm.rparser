%{
    enum Instruction {
        MV = 0,
        LB = 1,
        LI = 2,
        SB = 3,

        ADD = 10,
        SUB = 11,
        AND = 12,
        OR = 13,
        XOR = 14,
        NOT = 15,

        NOP = 62,
        HLT = 63,
    }

    enum Register {
        R0 = 8,
        R1 = 9,
        R2 = 10,
        R3 = 11,
        R4 = 12,
        R5 = 13,
        R6 = 14,
        R7 = 15,
    }

    impl Register {
        pub fn from_str(s: &str) -> Option<Self> {
            match s {
                "r0" => Some(Register::R0),
                "r1" => Some(Register::R1),
                "r2" => Some(Register::R2),
                "r3" => Some(Register::R3),
                "r4" => Some(Register::R4),
                "r5" => Some(Register::R5),
                "r6" => Some(Register::R6),
                "r7" => Some(Register::R7),
                _ => None,
            }
        }
    }
%}

%%
    {S : program} -> |datas| {
        println!("S -> program");
        "".to_string()
    } ;;

    {program : instructions} -> |datas| {
        println!("program -> instructions");
        "".to_string()
    } ;;

    {instructions : instruction instructions} -> |datas| {
        println!("instructions -> instruction instructions");
        format!("{} {}", datas[0], datas[1])
    } ;;

    {instructions : __EPSILON__} -> |datas| {
        println!("instructions -> Îµ");
        "".to_string()
    } ;;
    

    {instruction : li register comma number} -> |datas| {
        println!("instruction -> li register comma number");

        let dst = Register::from_str(&datas[1]).unwrap() as u8;
        let src = u8::from_str_radix(&datas[3], 10).unwrap();
        format!("{:02X} {:02X} {:02X}", Instruction::LI as u8, dst, src)
    } ;;

    {instruction : mv register comma register} -> |datas| {
        println!("instruction -> li register comma register");

        let dst = Register::from_str(&datas[1]).unwrap() as u8;
        let src = Register::from_str(&datas[3]).unwrap() as u8;
        format!("{:02X} {:02X} {:02X}", Instruction::MV as u8, dst, src)
    } ;;

    {instruction : lb register comma number} -> |datas| {
        println!("instruction -> lb register comma number");

        let dst = Register::from_str(&datas[1]).unwrap() as u8;
        let src = u8::from_str_radix(&datas[3], 10).unwrap();
        format!("{:02X} {:02X} {:02X}", Instruction::LB as u8, dst, src)
    } ;;

    {instruction : sb register comma number} -> |datas| {
        println!("instruction -> sb register comma number");

        let src = Register::from_str(&datas[1]).unwrap() as u8;
        let dst = u8::from_str_radix(&datas[3], 10).unwrap();
        format!("{:02X} {:02X} {:02X}", Instruction::SB as u8, dst, src)
    } ;;

    {instruction : nop} -> |datas| {
        println!("instruction -> nop");
        format!("{:02X} 00 00", Instruction::NOP as u8)
    } ;;

    {instruction : hlt} -> |datas| {
        println!("instruction -> hlt");
        format!("{:02X} 00 00", Instruction::HLT as u8)
    } ;;
%%
    pub gen_code: Vec<u8>,