%{
    #[derive(Clone)]
    pub struct LexToken {
        pub symbol_type: String,
        pub data: String,
    }

    impl LexToken {
        pub fn build(symbol_type: String, data: String) -> Self {
            Self { symbol_type, data }
        }
    }

    impl crate::rasm_parser::Token for LexToken {
        fn to_tree_node(&self) -> crate::rasm_parser::ParsingTreeNode {
            crate::rasm_parser::ParsingTreeNode::build(
                self.symbol_type.clone(),
                self.data.clone(),
                vec![],
            )
        }
    }
%}
    Digits = [0-9]
    HexDigits = [0-9]|[a-f]|[A-F]
    Lowercase = [a-z]
    Uppercase = [A-Z]
    Letters = {Lowercase}|{Uppercase}
    Asciis = [ -~]
    DecNumber = ({Digits}{Digits}*)|(-{Digits}{Digits}*)
    HexNumber = (0x{HexDigits}{HexDigits}*)
    WhiteSpace = ( |\n|\r|\f|\t|\v)*
    String = "{Asciis}*"
    Instruction = li|mv|lb|sb|add|addi|sub|and|andi|or|ori|xor|xori|not|cmp|jal|be|bne|nop|hlt
    Tag = {Letters}({Letters}|{Digits})*
    Register = r[0-8]
    Comment = ((;|#){Asciis}*\n)
    Comma = ,
    TagDef = {Tag}:
    TagRef = {Tag}
    Error = {Asciis}
%%
    {Instruction} -> |s|{
        *self.instructions_cnt.borrow_mut() += 1;
        self.tokens.borrow_mut().push(LexToken::build(s.into(), s.into()));
    } ;;
    {Register} -> |s|{
        self.tokens.borrow_mut().push(LexToken::build("register".into(), s.into()));
    } ;;
    {Comment} -> |s|{
    } ;;
    {DecNumber} -> |s|{
        match i8::from_str_radix(s.into(), 10) {
            Ok(num) => {
                self.tokens
                    .borrow_mut()
                    .push(LexToken::build("number".into(), (num as u8).to_string()));
            }
            Err(e) => {
                panic!("invalid operator number: {}, {}", s, e);
            }
        }
    } ;;
    {HexNumber} -> |s|{
        match u8::from_str_radix(&s[2..], 16) {
            Ok(num) => {
                self.tokens
                    .borrow_mut()
                    .push(LexToken::build("number".into(), num.to_string()));
            }
            Err(e) => {
                panic!("invalid operator number: {}, {}", s, e);
            }
        }
    } ;;
    {WhiteSpace} -> |s|{
    } ;;
    {Comma} -> |s|{
        self.tokens.borrow_mut().push(LexToken::build("comma".into(), s.into()));
    } ;;
    {TagDef} -> |s|{
        let key = s[..s.len() - 1].to_string();
        // if tag is already defined, panic
        if self.tags.borrow().contains_key(&key) {
            panic!("tag '{}' is already defined", &key);
        }
        self.tags
            .borrow_mut()
            .insert(key, *self.instructions_cnt.borrow() * 3);
    } ;;

    {TagRef} -> |s|{
        self.tokens
            .borrow_mut()
            .push(LexToken::build("tag".into(), s.to_string()));
    } ;;
    {Error} -> |s|{
        panic!("invalid token: {}", s);
    } ;;
%%
    pub tokens: std::cell::RefCell<Vec<LexToken>>,
    pub instructions_cnt: std::cell::RefCell<u32>,
    pub tags: std::cell::RefCell<HashMap<String, u32>>,